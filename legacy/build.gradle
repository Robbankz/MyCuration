apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'jacoco'

android {
    compileSdkVersion 28

    defaultConfig {
        minSdkVersion 21
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

jacoco {
    toolVersion = jacoco_version
}

// A list of directories which should be included in coverage report
def coverageSourceDirs = ['src/main/java', 'src/main/kotlin']
// A list of files which should be excluded from coverage report since they are generated and/or framework code
def coverageExcludeFiles = ['**/R.class', '**/R$*.class', '**/com/android/**/*.*',
                            '**/BuildConfig.class', '**/*Activity*.class',
                            '**/*Fragment*.class', '**/*Receiver.class',
                            '**/*Manifest*.class', '**/*Application*.class',
                            '**/com/phicdy/mycuration/data/db/*.*',
                            '**/com/phicdy/mycuration/data/repository/*.*',
                            '**/com/phicdy/mycuration/di/*.*',
                            '**/com/phicdy/mycuration/domain/alarm/*.*',
                            '**/com/phicdy/mycuration/data/filter/Filter.class',
                            '**/com/phicdy/mycuration/data/filter/FilterFeedRegistration.class',
                            '**/com/phicdy/mycuration/data/rss/Article.class',
                            '**/com/phicdy/mycuration/data/rss/Curation.class',
                            '**/com/phicdy/mycuration/data/rss/CurationCondition.class',
                            '**/com/phicdy/mycuration/data/rss/CurationSelection.class',
                            '**/com/phicdy/mycuration/data/rss/Feed*',
                            '**/com/phicdy/mycuration/domain/task/GetFeedIconTask*',
                            '**/com/phicdy/mycuration/domain/task/HatenaBookmarkApi*',
                            '**/com/phicdy/mycuration/tracker/*.*']
task jacocoTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest']) {
    group = "Reporting"
    description = "Generate Jacoco coverage reports after running tests."
    reports {
        xml.enabled true
        html.enabled true
        csv.enabled false
        xml.destination new File("${buildDir}/reports/jacoco/jacocoTestReport.xml")
        html.destination new File("${buildDir}/reports/jacoco/html")
        classDirectories =
                fileTree(dir: "${buildDir}/intermediates/classes/debug",
                        exclude: coverageExcludeFiles) +
                        fileTree(dir: "$buildDir/tmp/kotlin-classes/debug",
                                excludes: coverageExcludeFiles)
    }
    sourceDirectories = files(coverageSourceDirs)
    executionData = files "${buildDir}/jacoco/testDebugUnitTest.exec"

    doLast {
        println "jacoco xml report has been generated to file://${buildDir}/reports/jacoco/jacocoTestReport.xml"
        println "jacoco html report has been generated to file://${reports.html.destination}/index.html"
    }
}


dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutine_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutine_version"

    implementation "androidx.appcompat:appcompat:$appcompat_version"
    implementation 'com.google.android.material:material:1.1.0-alpha07'
    implementation "androidx.recyclerview:recyclerview:$recyclerview_version"
    implementation 'androidx.constraintlayout:constraintlayout:2.0.0-beta1'
    implementation 'androidx.preference:preference:1.1.0-alpha05'
    implementation 'androidx.browser:browser:1.0.0'

    implementation "org.koin:koin-android-scope:$koin_version"

    implementation "com.squareup.retrofit2:retrofit:$retrofit_version"

    def glideVer = '4.8.0'
    implementation("com.github.bumptech.glide:glide:$glideVer") {
        exclude group: "com.android.support"
    }
    kapt "com.github.bumptech.glide:compiler:$glideVer"

    implementation 'org.jsoup:jsoup:1.10.2'

    implementation 'com.github.deano2390:MaterialShowcaseView:1.2.0@aar'

    implementation 'io.github.inflationx:viewpump:1.0.0'

    implementation "com.google.firebase:firebase-core:$firebase_version"

    implementation "io.reactivex.rxjava2:rxandroid:$rxandroid_version"
    implementation "io.reactivex.rxjava2:rxjava:$rxjava_version"

    implementation "com.jakewharton.timber:timber:$timber_version"

    testImplementation 'junit:junit:4.12'
    testImplementation 'com.nhaarman.mockitokotlin2:mockito-kotlin:2.0.0'
    testImplementation 'org.assertj:assertj-core:3.11.1'
}
