apply plugin: 'jacoco'
apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'spoon'
apply plugin: 'io.fabric'

android {
    compileSdkVersion 28

    defaultConfig {
        applicationId "com.phicdy.mycuration"
        minSdkVersion 21
        targetSdkVersion 28
        versionName "1.6.2"
        versionCode 42
        multiDexEnabled true

        testApplicationId "com.phicdy.mycuration.test"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    signingConfigs {
        release {
            keyAlias "$RELEASE_KEY_ALIAS"
            storeFile file("$RELEASE_STORE_FILE_PATH")
            keyPassword "$RELEASE_KEY_PASSWORD"
            storePassword "$RELEASE_STORE_PASSWORD"
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
            signingConfig signingConfigs.release
        }
    }

    lintOptions {
        disable 'MissingTranslation'
        disable "RtlHardcoded"
        abortOnError true
    }

    testOptions {
        unitTests.returnDefaultValues = true
    }
}

jacoco {
    toolVersion = "0.7.7.201606060606"
}

// A list of directories which should be included in coverage report
def coverageSourceDirs = ['src/main/java', 'src/main/kotlin']
// A list of files which should be excluded from coverage report since they are generated and/or framework code
def coverageExcludeFiles = ['**/R.class', '**/R$*.class', '**/com/android/**/*.*',
                            '**/BuildConfig.class', '**/*Activity*.class',
                            '**/*Fragment*.class', '**/*Receiver.class',
                            '**/*Manifest*.class', '**/*Application*.class',
                            '**/com/phicdy/mycuration/data/db/*.*',
                            '**/com/phicdy/mycuration/data/repository/*.*',
                            '**/com/phicdy/mycuration/di/*.*',
                            '**/com/phicdy/mycuration/domain/alarm/*.*',
                            '**/com/phicdy/mycuration/data/filter/Filter.class',
                            '**/com/phicdy/mycuration/data/filter/FilterFeedRegistration.class',
                            '**/com/phicdy/mycuration/data/rss/Article.class',
                            '**/com/phicdy/mycuration/data/rss/Curation.class',
                            '**/com/phicdy/mycuration/data/rss/CurationCondition.class',
                            '**/com/phicdy/mycuration/data/rss/CurationSelection.class',
                            '**/com/phicdy/mycuration/data/rss/Feed*',
                            '**/com/phicdy/mycuration/domain/task/GetFeedIconTask*',
                            '**/com/phicdy/mycuration/domain/task/HatenaBookmarkApi*',
                            '**/com/phicdy/mycuration/tracker/*.*']
task jacocoTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest']) {
    group = "Reporting"
    description = "Generate Jacoco coverage reports after running tests."
    reports {
        xml.enabled true
        html.enabled true
        csv.enabled false
        xml.destination new File("${buildDir}/reports/jacoco/jacocoTestReport.xml")
        html.destination new File("${buildDir}/reports/jacoco/html")
        classDirectories =
                fileTree(dir: "${buildDir}/intermediates/classes/debug",
                        exclude: coverageExcludeFiles) +
                fileTree(dir: "$buildDir/tmp/kotlin-classes/debug",
                        excludes: coverageExcludeFiles)
    }
    sourceDirectories = files(coverageSourceDirs)
    executionData = files "${buildDir}/jacoco/testDebugUnitTest.exec"

    doLast {
        println "jacoco xml report has been generated to file://${buildDir}/reports/jacoco/jacocoTestReport.xml"
        println "jacoco html report has been generated to file://${reports.html.destination}/index.html"
    }
}

spoon {
    debug = true

    // To grant permissions to Android M >= devices */
    grantAllPermissions = true
}

dependencies {
    testImplementation 'junit:junit:4.12'
    testImplementation 'com.nhaarman.mockitokotlin2:mockito-kotlin:2.0.0'
    testImplementation 'org.assertj:assertj-core:3.11.1'
    androidTestImplementation 'androidx.test.uiautomator:uiautomator:2.2.0'
    androidTestImplementation 'androidx.test:runner:1.1.1'
    androidTestImplementation 'androidx.test:rules:1.1.1'
    androidTestImplementation 'com.squareup.spoon:spoon-client:1.6.4'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.1', {
        exclude group: 'com.android.support', module: 'support-annotations'
    }

    implementation 'androidx.appcompat:appcompat:1.1.0-alpha01'
    implementation 'com.google.android.material:material:1.1.0-alpha02'
    implementation 'androidx.recyclerview:recyclerview:1.1.0-alpha01'
    implementation 'androidx.preference:preference:1.1.0-alpha02'

    implementation 'com.squareup.retrofit2:retrofit:2.4.0'
    implementation 'com.jakewharton.retrofit:retrofit2-kotlin-coroutines-adapter:0.9.2'

    implementation 'org.jsoup:jsoup:1.10.2'
    implementation 'com.github.deano2390:MaterialShowcaseView:1.1.0@aar'
    implementation 'com.facebook.stetho:stetho:1.4.2'
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'io.reactivex.rxjava2:rxandroid:2.1.0'
    implementation 'io.reactivex.rxjava2:rxjava:2.1.10'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.0-alpha3'
    implementation 'com.crashlytics.sdk.android:crashlytics:2.9.5'
    implementation 'com.jakewharton.timber:timber:4.7.1'

    // Font
    implementation 'io.github.inflationx:calligraphy3:3.0.0'
    implementation 'io.github.inflationx:viewpump:1.0.0'

    def coroutineVer = '1.0.0'
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutineVer"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutineVer"

    def firebaseVer = '16.0.5'
    implementation "com.google.firebase:firebase-core:$firebaseVer"

    def koinVer = '1.0.1'
    implementation "org.koin:koin-android-scope:$koinVer"

    def glideVer = '4.8.0'
    implementation ("com.github.bumptech.glide:glide:$glideVer") {
        exclude group: "com.android.support"
    }
    kapt "com.github.bumptech.glide:compiler:$glideVer"
}

apply plugin: 'com.google.gms.google-services'

task copyBuild(type: Copy) {
    from 'build/outputs/apk/debug'
    into "$COPY_BUILD_DESTINATION"
    include '**/*.apk'
}

afterEvaluate { project ->
    project.tasks.assembleDebug << {
        println "$COPY_BUILD_DESTINATION"
        tasks.copyBuild.execute()
    }
}
